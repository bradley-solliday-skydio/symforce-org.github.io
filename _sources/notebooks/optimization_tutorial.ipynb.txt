{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization Tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Disclaimer\n",
    "Currently symforce supports generating arbitrary functions from symbolic expressions, and has a C++ optimizer for these functions, but no optimizer that's usable from a notebook.  So the below example is **not** how you should do optimization with SymForce; instead, take a look at `symforce/examples/bundle_adjustment`, until Aaron updates this tutorial with Cling or a Python optimizer.\n",
    "\n",
    "-------------------------------\n",
    "\n",
    "Anyway, the idea in this tutorial is that users can generate expressions needed to do optimization (e.g. jacobians, hessions, etc.), and then use the resulting functions with existing optimization software. In this example we generate a function that computes an update to an optimization variable using gradient descent."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we demonstrate a simple gradient descent example to show how the basic idea works. In this problem we will use on-manifold gradient descent to minimize the error between two rotations R0 and R1. We assume R0 is constant, and that an initial guess for R1 is given."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "\n",
    "from symforce import codegen\n",
    "from symforce import geo\n",
    "from symforce import sympy as sm\n",
    "from symforce.values import Values\n",
    "\n",
    "from symforce.notebook_util import display_code_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create symbolic rotations (values will be filled at runtime)\n",
    "R0 = geo.Rot3.symbolic(\"R0\")\n",
    "R1 = geo.Rot3.symbolic(\"R1\")\n",
    "epsilon = sm.Symbol(\"epsilon\")  # Small number to prevent numerical errors\n",
    "alpha = sm.Symbol(\"alpha\")  # Gradient descent step size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the error between the two rotations in the tangent space of R1\n",
    "error = geo.Matrix(R1.local_coordinates(R0, epsilon))  # Vector in tangent space\n",
    "\n",
    "# To match the traditional gradient descent formulation, we use a scalar error term + gradient\n",
    "scalar_error = geo.Matrix([error.squared_norm()])\n",
    "gradient = scalar_error.jacobian(R1)  # Compute the gradient wrt the tangent space of R1\n",
    "\n",
    "# Here we compute the update to R1 by performing a gradient descent step in the tangent space of R1\n",
    "current_state = geo.Matrix(R1.local_coordinates(R0, epsilon))\n",
    "updated_state = current_state - alpha * gradient.T\n",
    "updated_R1 = R1.retract(updated_state, epsilon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate the update function\n",
    "\n",
    "# Set up inputs and outputs\n",
    "inputs = Values()\n",
    "inputs[\"R0\"] = R0\n",
    "inputs[\"R1\"] = R1\n",
    "inputs[\"epsilon\"] = epsilon\n",
    "inputs[\"alpha\"] = alpha\n",
    "\n",
    "outputs = Values()\n",
    "outputs[\"R1_out\"] = updated_R1\n",
    "\n",
    "namespace = \"update_function\"\n",
    "# Create the output function\n",
    "update_function = codegen.Codegen(\n",
    "    name=\"update_function\",\n",
    "    inputs=inputs,\n",
    "    outputs=outputs,\n",
    "    config=codegen.PythonConfig(),\n",
    "    return_key=\"R1_out\",\n",
    ")\n",
    "# Output the code\n",
    "update_function_data = update_function.generate_function(namespace=namespace)\n",
    "display_code_file(\n",
    "    os.path.join(update_function_data[\"python_function_dir\"], \"update_function.py\"), \"python\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we set up the problem and solve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sym import Rot3\n",
    "\n",
    "# Import the generated function\n",
    "gen_module = codegen.codegen_util.load_generated_package(\n",
    "    namespace, update_function_data[\"python_function_dir\"]\n",
    ")\n",
    "\n",
    "R0 = Rot3.from_tangent([-1.7, 0.5, 0.3])\n",
    "R1 = Rot3.from_tangent([1.5, 0.2, -0.4])\n",
    "epsilon = 1e-9\n",
    "alpha = 0.1\n",
    "\n",
    "print(f\"Desired rotation: {R0}\")\n",
    "print(f\"Initial rotation: {R1}\")\n",
    "print(f\"Initial error: {np.linalg.norm(R1.local_coordinates(R0))}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run 10 steps of gradient descent\n",
    "for i in range(10):\n",
    "    R1 = gen_module.update_function(R0, R1, epsilon, alpha)\n",
    "    print(f\"New error: {np.linalg.norm(R1.local_coordinates(R0))}\")\n",
    "print(f\"Optimized rotation: {R1}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
